-Everything in Python is object
-Every object contains set of methods


objects
--------

number
-------
number can be integer or decimal or octal or hexa

aval = 10
bval = 4.5

string
-------
string is defined in single or double or triple quotes

aname = 'python'
bname = "python programming"
cname = """unix shell scripting"""


list ( array in C )
----
list contains set of elements.
Elements can be set of numbers or strings or any combination.
list elements are defined in [].

alist = [10,20,30]
blist = ["python","kafka","ruby"]
clist = [10,20,5.65,"java"]

obje = [[1,2],[3,4],[5,6],[7,8],{1:2},(4,5)]    # list of lists


tuple ( READONLY, IMMUTABLE , UNCHANGABLE)
-----------------------
tuple contains set of elements.
Elements can be set of numbers or strings or any combination.
tuple  elements are defined in ().
****** Elements inside tuple cannot be modified ******


atup = (45,67,34)
btup = ("java","oracle","mysql")
ctup = (56,7.89,"python")



dictionary/hash/map
-------------
dictionary contains elements in key-value pairs.
dictionary elements are defined in {}.
** In dictionary, keys are ALWAYS UNIQUE
** In dictionary , key can be number or string
                  value can be number,string,list,tuple,dictionary


syntax :   object = { key:value , key:value , key:value }
example:     book = {"chap1":10 ,"chap2":20 ,"chap3":30 ,"chap1":1000 }
           numbers = {1:2,4:5,6:7}
             info = {"chap1":['John',50,"UK"] ,"chap2":['Rita',60,"US"] }



set
-----
set is UNORDERED COLLECTION Of UNIQUE elements of SAME TYPE.
set elements are defined in {}.
** Indexing is NOT allowed in set operations ****


aset =  {10,10,10,20,30}




















Object classification
------------------------


mutable
----------
list
dictionary
set


immutable
------------
number
string
tuple


methods & functions
---------------------

methods: methods are object specific.
         Every object has its own different methods
         All the methods are accessed with . operator

function: functions are common for all the objects.


functions are of two types

- builtin functions
- user defined functions

to display all builtin functions :

In the console :     dir(__builtins__)

builtin functions  
-----------------
print() :
len()   : length of the object
dir()   : will display the dir of all the methods
help()  : just like man
range() :
input()
max()
min()
sum()
isinstance()
id()
zip()


conversion functions
----------------------
int()
float()
oct()
str()
list()
tuple()
dict()
set()



operators
----------


arithmetic operators :  + - * %  /

logical operators  :   and or not
                      if a >5 and  a <100 :
                      if name.isupper()  or name.count(4) 

relational operators: < <= > >= == !=

assignment operator ( ++ and -- are allowed in python)

val = 10
val = val + 1  (or)  val+=1
val = val - 1  (or)  val-=1


special operators:
-----------------
in      if 'python' in 'python programming':
as



file handling
--------------

working with flat files  ( .csv .log .conf .prop )
working with third party files ( docx ppt pdf zip ....)


working with flat files 
------------------
r : read
w : write
a : append

opening the file
-----------------

syntax:    object = open(filename,mode)

example:    fobj  = open("abc.txt","r")   # read mode

            fobj  = open("abc.txt","w")   # write mode
            case1: If the file is not existing, file will be created first
            case2: If the file already exists,  it overwrite the file content first

            fobj  = open("abc.txt","a")   # append mode
            case1: If the file is not existing, file will be created first
            case2: if the file is existing, it appends the data to the first



closing the file
-----------------
fobj.close()



file read operation
-------------------

- reading line by line ( for processing ) 
- using fobj.readlines() -----------------> will read the complete file in list format
- using fobj.read()    -------------------->  will read the complete file in string ( not suggested in general )
- using csv library   ( for processing ) 
- using pandas library  ( for processing ) 


exception handling
--------------------
Basically there are 2 types of errors

1. syntax error
2. runtime error or semantic error or logical error


Handling the errors in runtime is known as exception handling


try
except
else    ( optional)
finally ( optional)



Installing 3rd party library
-----------------------------
- using pip tool ( pip is an automated tool that is installed with python by default )
  step1:  pip install pymysql

- using easy_install tool
  step1: easy_install pymysql

- installing manually
  step1: download the required library
  step2: open prompt/terminal
  step3: navigate to the path where the .tar.gz is extracted
  step4: python setup.py install























libraries
---------

- builtin libraries ( which are generally used by everyone like os related, mathematical libraries , file related )
--------------------
Built libraries are installed with python itself.


- third party libraries   ( www.pypi.org)    2750000+
-----------------------
Depending on the requirement(cloud, ML , excel , msoffice, networking, image processing )  developer has to install the third party library using pip tool or installing manually.

How to import library?
----------------------

import math
print(math.tan(2))
print(math.floor(2.3))


importing library with alias name
---------------------------------
import math as m
print(m.tan(2))
print(m.floor(2.3))


importing required methods ONLY   
--------------------------------
from math import sin,cos,tan
print(sin(2))
print(cos(1))




8000+  builtin libraries
250000+ third party library

builtin libraries
-----------------------

os            : os.listdir() os.remove() 
sys           : system config information
urllib.request: working with http
math          : mathematical operations
random        : random numbers
calendar
smtplib       : sending mails
ftplib        : ftp'ng the file
telnetlib     :
logging       : logging all the events
shutil        : copy,move,rmtree ....
filecmp       : comparing directories
zipfile       : create/extract the zip files
rarfile       : create/extract the tar files
tarfile       : create/extract the tarfiles
getpass       : shadowing the password
json          : reading/writing json files
csv           : reading/writing csv files
xml        
sysconfig     : system configuration
collections   : working with dictionaries
argparse      : passing args from command line
optparse      : passing args from command line
time          : working with date and time
datetime      : working with date and time
cryptography  : encrypting and decrypting the passwords
heapq         : performing array operations
gzip          : reading gunzip files
re            : validating the strings
ipadresss     : validting ip address
platform      : display platform information
pathlib       : creating temp files
threading     : for performing multi threading
multiprocessing:
subprocess    : invoking the system commands ( linux or dos commands)



frequently used third party libraries
---------------------------------------
database related
----------------
pymysql   :
cx_Oracle
pymongo
pymssql
pyautogui

web frameworks ( developing web applications)
--------------
django
flask
bottom

analytics/machine learning
---------------------------
numpy
scipy
pandas
seaborn
plotly
ggplot
matplotlib   : visualizing data .. bar graph.. pie graph
scikit-learn :  machine learning algorithms

image processing
---------------
pillow
opencv

APIs ( REST API) ( web services ) 
-----
requests

excel programming
------------------
openpyxl    : reading/write excel files
xlsxwriter  : writing to excel file
python-docx : working with ms-word

networking
-----------
paramiko   :  interacting with remote servers
netmiko    :  connecting to router/switch
pyping     :  ping any host or ip address



web scrapping
--------------
beautifulsoup
scrapy






























































































































































